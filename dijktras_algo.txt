 

// Dijktras Algo

 vector<pair<int,int>> adj[10005];
 priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;  //min_heap
 int dist[10005];



 void solve(){
    int n,m;
    cin>>n>>m;
    int src=1;

    for(int i=0;i<m;i++) {
      int u,v,w;
      cin>>u>>v>>w;
      adj[u].push_back(make_pair(v,w));
      adj[v].push_back(make_pair(u,w));
    }
    
    for(int i=1;i<=n;i++) dist[i]=INT_MAX;
    
    dist[src]=0;  
    pq.push(make_pair(0,src));

    while(!pq.empty()){
      pair<int,int> temp=pq.top();
      pq.pop();
      int curr=temp.second;
      int wt=temp.first;

      for(auto x:adj[curr]){
         if(wt+x.second<dist[x.first]){
            dist[x.first]=wt+x.second;
            pq.push(make_pair(dist[x.first],x.first));
         }
      }
    }

    for(int i=1;i<=n;i++) cout<<dist[i]<<" ";  

 }